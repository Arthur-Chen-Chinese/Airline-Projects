<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd">
       
       
    <import resource="classpath:spring-redis.xml"/>
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:redis.properties</value>
                <value>classpath:jdbcConfig.properties</value>
            </list>
        </property>
    </bean>

	<!-- configration of spring -->
	
	<!-- ===================================1.Annotation Scanner================================== -->
	<context:component-scan base-package="com.airline">
		<!-- Exclude controller package while scaning packages -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	
	<!-- ===============================2.Data source|Transaction configuration|==========================================-->
	<!-- <context:property-placeholder location="classpath:jdbcConfig.properties"/> -->
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
		<property name="driverClass" value="${jdbc.driverClass}"/>
		<property name="user" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!--=============================3. Config mybatis================================ -->
	<!-- Create sqlsessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- Designate global configuration of mybatis  -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="dataSource" ref="pooledDataSource"/>
		<!-- Designate file of configuration of mybatis-mapper -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"/>
	</bean>
	
	
	<!-- Config scannerï¼Œadd interface of mybatis to ioc -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- Scan all implementations of Dao Interfaces, and add them to ioc container -->
		<property name="basePackage" value="com.airline.dao"></property>
	</bean>
	
	<!-- Config a executable sqlSession for Bulk Operations -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	
	
	<!-- ====================================Configuration for transaction====================================== -->
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- Control data source with transaction manager -->
		<property name="dataSource" ref="pooledDataSource"/>
	</bean>
	
	<!-- Open annotation-based transaction, xml-base is also available-->
	
	 <aop:aspectj-autoproxy proxy-target-class="true"/>
	
	
	<aop:config>
		<!-- pointcut expression: To decide which pointcut need advice; First double dots means service package with 
		its subpackages are applied and Second double points means parameters are arbitrary -->
		<aop:pointcut expression="execution(* com.airline.services..*(..))" id="txPoint"/>
		<!-- Enhancement of transaction -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config> 
	
	
	
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- Decide what will be cut-in -->
		<tx:attributes>
			<!-- * means all cut-in methods are about transactions' methods -->
			<tx:method name="*" read-only="false"/>
			<!-- all cut-in methods start with "get" -->
		</tx:attributes>
	</tx:advice>
	 
</beans>